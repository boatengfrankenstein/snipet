{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ClassificationService {\n  constructor() {\n    // TODO: move to database\n    this.AllClassification = [\"UNCLASSIFIED\", \"CONFIDENTIAL\", \"SECRET\", \"TOP SECRET\"];\n  }\n  fetchClassification(classification) {\n    if (!this.classification) {\n      this.classification = this.getClassification(\"CONFIDENTIAL\");\n    }\n    return this.classification;\n  }\n  getClassification(cl) {\n    return this.AllClassification.find(c => c === cl);\n  }\n}\nClassificationService.ɵfac = function ClassificationService_Factory(t) {\n  return new (t || ClassificationService)();\n};\nClassificationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClassificationService,\n  factory: ClassificationService.ɵfac\n});","map":{"version":3,"mappings":";AAIA,OAAM,MAAOA,qBAAqB;EADlCC;IAcG;IACQ,sBAAiB,GAA8B,CACtD,cAAc,EAAC,cAAc,EAAC,QAAQ,EAAC,YAAY,CACrD;;EAXAC,mBAAmB,CAACC,cAAkC;IACpD,IAAI,CAAC,IAAI,CAACA,cAAc,EAAE;MACxB,IAAI,CAACA,cAAc,GAAG,IAAI,CAACC,iBAAiB,CAAC,cAAc,CAAC;;IAE9D,OAAO,IAAI,CAACD,cAAc;EAC5B;EAQAC,iBAAiB,CAACC,EAAsB;IACtC,OAAO,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,KAAKH,EAAE,CAAE;EACpD;;AApBWL,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;SAArBA,qBAAqB;EAAAS,SAArBT,qBAAqB;AAAA","names":["ClassificationService","constructor","fetchClassification","classification","getClassification","cl","AllClassification","find","c","factory"],"sourceRoot":"","sources":["/Users/danielboakye/Documents/ag/angular-banner/src/app/classification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\ntype ClassificationType = \"UNCLASSIFIED\"|\"CONFIDENTIAL\"|\"SECRET\"|\"TOP SECRET\";\n@Injectable()\nexport class ClassificationService {\n  classification!:ClassificationType ;\n\n\n\n  fetchClassification(classification: ClassificationType) {\n    if (!this.classification) {\n      this.classification = this.getClassification(\"CONFIDENTIAL\");\n    }\n    return this.classification;\n  }\n\n\n   // TODO: move to database\n   private AllClassification: Array<ClassificationType> = [\n    \"UNCLASSIFIED\",\"CONFIDENTIAL\",\"SECRET\",\"TOP SECRET\"\n ];\n\n  getClassification(cl: ClassificationType): ClassificationType {\n    return this.AllClassification.find(c => c === cl)!;\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}